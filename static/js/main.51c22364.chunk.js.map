{"version":3,"sources":["logo.gif","TemperatureInput.js","BoilingVerdict.js","TemperatureCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["scaleNames","c","f","TemperatureInput","props","handleChange","bind","e","this","onTemperatureChange","target","value","temperature","scale","onChange","React","Component","BoilingVerdict","celsius","toCelsius","fahrenheit","toFahrenheit","tryConvert","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","TemperatureCalculator","handleCelsiusChange","handleFahrenheitChange","state","setState","id","onTempuratureChange","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAe,G,MAAA,IAA0B,kC,kDCCnCA,EAAa,CACfC,EAAG,UACHC,EAAG,cA6BQC,E,kDAzBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFL,E,gDAKnB,SAAaC,GACTC,KAAKJ,MAAMK,oBAAoBF,EAAEG,OAAOC,S,oBAG5C,WACI,IAAMC,EAAcJ,KAAKJ,MAAMQ,YACzBC,EAAQL,KAAKJ,MAAMS,MACzB,OACI,qCACI,oEAEQb,EAAWa,GAFnB,QAKA,uBAAOF,MAAOC,EAAaE,SAAUN,KAAKH,sB,GApB3BU,IAAMC,WCKtBC,E,4JARX,WACI,OAAIT,KAAKJ,MAAMc,SAAW,IACd,0CAEA,kD,GALSH,IAAMC,W,MCEnC,SAASG,EAAUC,GACf,OAA2B,GAAnBA,EAAa,IAAU,EAGnC,SAASC,EAAaH,GAClB,OAAkB,EAAVA,EAAc,EAAK,GAG/B,SAASI,EAAWV,EAAaW,GAC7B,IAAMC,EAAQC,WAAWb,GACzB,GAAIc,OAAOC,MAAMH,GACb,MAAO,GAEX,IAAMI,EAASL,EAAQC,GAEvB,OADgBK,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,W,IAyCJC,E,kDArCX,WAAY5B,GAAQ,IAAD,8BACf,cAAMA,IACD6B,oBACD,EAAKA,oBAAoB3B,KAAzB,gBACJ,EAAK4B,uBACD,EAAKA,uBAAuB5B,KAA5B,gBACJ,EAAK6B,MAAQ,CAAEvB,YAAa,GAAIC,MAAO,KANxB,E,uDASnB,SAAoBD,GAChBJ,KAAK4B,SAAS,CAAExB,cAAaC,MAAO,Q,oCAGxC,SAAuBD,GACnBJ,KAAK4B,SAAS,CAAExB,cAAaC,MAAO,Q,oBAGxC,WACI,IAAMA,EAAQL,KAAK2B,MAAMtB,MACnBD,EAAcJ,KAAK2B,MAAMvB,YACzBM,EAAoB,MAAVL,EACZS,EAAWV,EAAaO,GAAaP,EACnCQ,EAAuB,MAAVP,EACfS,EAAWV,EAAaS,GAAgBT,EAE5C,OAAQ,sBAAKyB,GAAG,aAAR,UACJ,cAAC,EAAD,CAAkBxB,MAAM,IAAID,YAAaM,EACrCT,oBAAqBD,KAAKyB,sBAC9B,cAAC,EAAD,CAAkBpB,MAAM,IAAID,YAAaQ,EACrCkB,oBAAqB9B,KAAK0B,yBAC9B,cAAC,EAAD,CACIhB,QAASO,WAAWP,Y,GAhCAH,IAAMC,WCN3BuB,MAZf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,cAAC,EAAD,UCGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.51c22364.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.8d16ff4e.gif\";","import React from 'react'\r\nconst scaleNames = {\r\n    c: 'Celsius',\r\n    f: 'Fahrenheit'\r\n};\r\n\r\nclass TemperatureInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.props.onTemperatureChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const temperature = this.props.temperature;\r\n        const scale = this.props.scale;\r\n        return (\r\n            <fieldset>\r\n                <legend>\r\n                    Saisissez la temp√©ratue en {\r\n                        scaleNames[scale]\r\n                    } :\r\n                </legend>\r\n                <input value={temperature} onChange={this.handleChange} />\r\n            </fieldset>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TemperatureInput;","import React from 'react';\r\n\r\nclass BoilingVerdict extends React.Component {\r\n    render() {\r\n        if (this.props.celsius >= 100)\r\n            return (<div>Boiling</div>);\r\n        else\r\n            return (<div>not boiling</div>)\r\n    }\r\n}\r\n\r\nexport default BoilingVerdict;","import React from 'react';\r\nimport TemperatureInput from './TemperatureInput';\r\nimport BoilingVerdict from './BoilingVerdict';\r\nimport './calculator.css';\r\nfunction toCelsius(fahrenheit) {\r\n    return (fahrenheit - 32) * 5 / 9;\r\n}\r\n\r\nfunction toFahrenheit(celsius) {\r\n    return (celsius * 9 / 5) + 32;\r\n}\r\n\r\nfunction tryConvert(temperature, convert) {\r\n    const input = parseFloat(temperature);\r\n    if (Number.isNaN(input)) {\r\n        return '';\r\n    }\r\n    const output = convert(input);\r\n    const rounded = Math.round(output * 1000) / 1000;\r\n    return rounded.toString();\r\n}\r\n\r\nclass TemperatureCalculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleCelsiusChange =\r\n            this.handleCelsiusChange.bind(this);\r\n        this.handleFahrenheitChange =\r\n            this.handleFahrenheitChange.bind(this);\r\n        this.state = { temperature: '', scale: 'c' };\r\n    }\r\n\r\n    handleCelsiusChange(temperature) {\r\n        this.setState({ temperature, scale: 'c' });\r\n    }\r\n\r\n    handleFahrenheitChange(temperature) {\r\n        this.setState({ temperature, scale: 'f' });\r\n    }\r\n\r\n    render() {\r\n        const scale = this.state.scale;\r\n        const temperature = this.state.temperature;\r\n        const celsius = scale === 'f' ?\r\n            tryConvert(temperature, toCelsius) : temperature;\r\n        const fahrenheit = scale === 'c' ?\r\n            tryConvert(temperature, toFahrenheit) : temperature;\r\n\r\n        return (<div id='calculator'>\r\n            <TemperatureInput scale=\"c\" temperature={celsius}\r\n                onTemperatureChange={this.handleCelsiusChange} />\r\n            <TemperatureInput scale='f' temperature={fahrenheit}\r\n                onTempuratureChange={this.handleFahrenheitChange} />\r\n            <BoilingVerdict\r\n                celsius={parseFloat(celsius)} />\r\n        </div>);\r\n\r\n    }\r\n}\r\n\r\nexport default TemperatureCalculator;","import logo from './logo.gif';\nimport './App.css';\nimport TemperatureCalculator from './TemperatureCalculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <TemperatureCalculator />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}